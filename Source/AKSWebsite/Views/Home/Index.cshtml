@{
    ViewData["Title"] = "Home Page";
}
@using System.Net
@model HomePageModel
<div class="container body-content">
    <img src="https://github.com/AzureDemos/KubernetesLab/raw/master/Documentation/images/banner-lab.png" class="banner" />

    <div class="row">
        <div class="col-md-12">
            <h1>Configuration Files</h1>
            <p>
                The application contains several different types of config files from JSON and XML documents to environment variables.
                The app knows which root folder to find these in by checking the <code>ASPNETCORE_ENVIRONMENT</code> environment variable and reading for all sub folders within it.
            </p>
            <p>
                When deploying the application into Kubernetes we can use <strong>Config Maps</strong> and <strong>Secrets</strong> to inject these files into the folder the app it reading.
            </p>
            <blockquote>
                <p>
                    It's important to understand here, that the container which will eventually be stored in a Container Registry <strong>does not contain the folder named Kubernetes or any of the config files</strong>.
                    The Kubernetes folder and the JSON and XML files are mounted into the contain by Kubernetes and therefore, we can change these per environment in our CI/CD pipelines without re-building the container.
                </p>
            </blockquote>
            <div class="col-md-6">
                <h3>Development Configs</h3>
                <img class="img-rounded img-responsive" src="~/images/configs-dev.png" title="config dev.cs" />
            </div>
            <div class="col-md-6">
                <h3>Kubernetes Configs</h3>
                <img class="img-rounded img-responsive" src="~/images/configs-aks.png" title="config aks" />
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <h1>Configuration builder in app startup</h1>
            <p>
                This code snippet shows how we are combining the <code>ASPNETCORE_ENVIRONMENT</code> environment variable with the conventioned based config locations, to build our apps <code>IConfigruation</code> instance.
            </p>
            <p>
                So, when running in Debug the <strong>configmap-frontend.json</strong> file for instance, is located at <strong>Configs/Environments/Development/Json/configmap-website.json</strong>
            </p>
            <p>
                However, when running in AKS the <strong>configmap-frontend.json</strong> file is located at <strong>Configs/Environments/Kubernetes/Json/configmap-website.json</strong>.


            </p>
            <p>
                This is because we will assign the <code>ASPNETCORE_ENVIRONMENT</code> environment variable in the Pod to <strong>Kubernetes</strong> within the deployment YAML file.
            </p>
            <img class="img-rounded img-responsive" src="~/images/startup.png" title="startup.cs" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <br />
            <h1>This applications current configs settings</h1>
            <table class="table table-bordered table-striped">
                <tr>
                    <th>Config Type</th>
                    <th>Location</th>
                    <th>File Name</th>
                    <th>Keys</th>
                    <th>Values</th>
                    <th>DevOps Configured</th>
                </tr>
                <tr>
                    <td>App Settings</td>
                    <td>AppRoot</td>
                    <td>appsettings.json  </td>
                    <td>App:CodeVersion</td>
                    <td><strong>@Model.Configuration["App:CodeVersion"]</strong></td>
                    <td><i class="icon fas fa-times-circle"></td>
                </tr>
                <tr>
                    <td>Environment Variables</td>
                    <td>Environment</td>
                    <td>N/A</td>
                    <td>ASPNETCORE_ENVIRONMENT</td>
                    <td><strong>@Model.Configuration["ASPNETCORE_ENVIRONMENT"]</strong></td>
                    <td><i class="icon fas fa-check-circle"></i></td>
                </tr>
                <tr>
                    <td>Config Map</td>
                    <td>~/<strong>{EnvironmentName}</strong>/JSON</td>
                    <td>configmap-frontend.json  </td>
                    <td>API:Name <br />App:Theme</td>
                    <td>
                        <strong>
                            @Model.Configuration["API:Name"]
                            <br/>
                            @Model.Configuration["App:Theme"]
                        </strong>
                    </td>
                    <td><i class="icon fas fa-check-circle"></i></td>
                </tr>
                <tr>
                    <td>Secret</td>
                    <td>~/<strong>{EnvironmentName}</strong>/Secrets</td>
                    <td>secret-frontend.json  </td>
                    <td> API:Key <br /> API:Secret</td>
                    <td><strong>@Model.Configuration["API:Key"] <br />@Model.Configuration["API:Secret"]</strong></td>
                    <td><i class="icon fas fa-check-circle"></i></td>
                </tr>
            </table>
        </div>
    </div>








    <div class="row">
        <div class="col-md-12">
            <br />
            <div class="alert alert-info communication" role="alert">
                <h1 class="alert-heading">Communicating with other services via DNS</h1>

                <p>
                    Kubernetes has its own DNS server that can resolve via the service name and namespace.
                    Docker compose also has the same functionality, so we make sure to name the API service in either our Kubernetes YAML files or our Docker Compose
                    file and then tell the Website what the name of that serivice is through config.
                </p>
                <p>
                    We named the api in the <strong>configmap-frontend.json</strong> as shown in the configs above.
                    Therefore we know the location of the api is: <strong>http://@(Model.APIName)</strong>
                </p>
                <hr>
                <div class="col-md-6">
                    <p class="api-response ">API Responses</p>
                    @{
                        int iteration = 1; 
                    }
                    @foreach (var response in Model.APIResponse.Responses.AsEnumerable().Reverse().ToList())
                    {
                        <h4>@response.Response</h4>
                        <p>@response.CacheData</p>
                        <table class="table table-condensed">
                            <tr>
                                <th>Header Key</th>
                                <th>Header Value</th>
                            </tr>
                            @foreach (var header in response.Headers)
                            {
                                <tr>
                                    <td>@header.Key</td>
                                    <td>@header.Value</td>
                                </tr>
                            }
                        </table>
                        if (iteration < Model.APIResponse.Responses.Count)
                        {
                            <i class="icon fas fa-arrow-circle-down downstream"></i>
                            iteration++;
                        }

                        <br /> <br />
                    }
                </div>
                <div class="col-md-6">
                  
                    <img src="~/images/docker-compose.png" />
                </div>
                <div class="clearfix"></div>
             

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">

            <a href="/home/spike?mode=cpu" class="btn btn-danger btn-lg btn-block">Purposely Cause API Memory Spike</a>

           
                <p>@TempData["SpikeResponse"]</p>
            
        </div>
    </div>
</div>